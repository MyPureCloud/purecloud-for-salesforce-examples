<apex:page >
   <apex:includeScript value="/support/console/34.0/integration.js"/>

   <style type="text/css">
      .statusSelection {
         position: relative;
         display: block;
         padding-top: 6px;
      }
      .subscriptionInput {
       	display:flex;
      }
      .subscribeButton {
        margin-top:-5%;
      }
      .notificationInput {
       	margin-left:10%;
      }
   </style>

   <script type="text/javascript">

   //Omni Status Map Ids are org specific
   var statusMap = {Omni:{available:"0N5j00000008QNQ" , queue:"0N5j00000008QMt"}, PureCloud:{available:"AVAILABLE", queue:"ON_QUEUE"}};

   function OutputToConsole(message){
      console.log(message);
      if(document.getElementById("OUTPUTCONSOLE").value != ""){
         document.getElementById("OUTPUTCONSOLE").value = document.getElementById("OUTPUTCONSOLE").value + " \r\n";
      }

      document.getElementById("OUTPUTCONSOLE").value = document.getElementById("OUTPUTCONSOLE").value + message;
   }

   function changeStatus(status) {
      if(status == 'available'){
         sforce.console.fireEvent('inin.salesforce.constants.consoleevent.changestatus', statusMap.PureCloud.available , function(data){console.log(data);});
         sforce.console.presence.setServicePresenceStatus(statusMap.Omni.available);
      }else if(status = 'onQueue'){
         sforce.console.fireEvent('inin.salesforce.constants.consoleevent.changestatus', statusMap.PureCloud.queue , function(data){console.log(data);});
         sforce.console.presence.setServicePresenceStatus(statusMap.Omni.queue);
      }
   }

    function getInteractionId() {
        return document.getElementById('interactionId').value;
    }

    function changeState(state) {
        var id = getInteractionId();
        var msg = JSON.stringify({data: {
                id: id,
                action: state
        	}
        });
        sforce.console.fireEvent('inin.salesforce.constants.consoleevent.changestate', msg, function(data){console.log(data)});
    }

    function addCustomAttributes() {
        var id = getInteractionId();
        var customAttributesText = document.getElementById('customAttributes').value;
        var customAttributes = {};
        try{
        	customAttributes = JSON.parse(customAttributesText);
        } catch(e){
            console.log('Error parsing custom attributes: ' + JSON.stringify(e.message));
        }
        var msg = JSON.stringify({
            data: {
            	id: id,
            	attributes: customAttributes
        	}
        });
        sforce.console.fireEvent('inin.salesforce.constants.consoleevent.addCustomAttributes', msg, function(data){console.log(data)});
    }
    
    function subscribeToEvent() {
        var subscriptionType = document.getElementById('subscriptionType').value;
        var subscriptionCategories = document.getElementById('subscriptionCategories').value;
        var categories = subscriptionCategories.split(',');
        
        var msg = JSON.stringify({
        	data: {
                type: subscriptionType,
                categories: categories
            }
        });
        sforce.console.fireEvent('inin.salesforce.constants.consoleevent.subscribe', msg, function(data){console.log(data)});
    }

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.UPDATE_STATUS', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.INTERACTION_CONNECTED', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.INTERACTION_DISCONNECTED', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.LOGGED_OUT', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.ACW_REQUIRED', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.ACW_COMPLETED', function(data){
        OutputToConsole(JSON.stringify(data));
    });

    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.INTERACTION_EVENT', function(data) {
        var id = JSON.parse(data.message).data.data.id;
        var category = JSON.parse(data.message).data.category;
        if(id && category === 'add') {
            document.getElementById('interactionId').value = id;
        }
        OutputToConsole(JSON.stringify(data));
    });
    
    sforce.console.addEventListener('inin.salesforce.constants.consoleevent.pc.CLIENT_EVENT', function(data){
        OutputToConsole(JSON.stringify(data));
    });

   </script>
   <span class="statusSelection">
      <label>Interaction Id: </label>
      <input id="interactionId" type="text" value="" size = "40"/>
   <br/><hr/>
      <label>Interaction Events: </label>
      <br/>
      <input type="button" onclick="changeState('disconnect')" value="disconnect" />
      <input type="button" onclick="changeState('pickup')" value="pickup" />
      <input type="button" onclick="changeState('mute')" value="mute" />
      <input type="button" onclick="changeState('hold')" value="hold" />
      <input type="button" onclick="changeState('securePause')" value = "secure pause" />
   <hr/>
      <input type="button" onclick="changeStatus('available')" value="Status Available" /> |
      <input type="button" onclick="changeStatus('onQueue')" value="Status On Queue" />
   <hr/>
      <label>Custom Attributes: </label>
       <input id="customAttributes" type="text" value="" size="100"/>
       <br/>
       <input type="button" onclick="addCustomAttributes()" value="Add Custom Attributes" />
       <hr/>
       <label>Subscribe: </label>
       <br/>
       <div class="subscriptionInput">
        <label>Type: </label>
       	<input id="subscriptionType" class="notificationInput" type="text"  value="Notification" size="100"/>
       </div>
       <div class="subscriptionInput">
       	<label>Categories: </label>
       	<input id="subscriptionCategories" type="text" value="conversationTranscription" size="100"/> 
       </div>
       <br/>
       <input type="button" class="subscribeButton" onclick="subscribeToEvent()" value="Subscribe to Event" />
    </span>
    <hr/>
   <span>
       <textArea id="OUTPUTCONSOLE" rows="20" cols="100" ></textArea>
   </span>

</apex:page>